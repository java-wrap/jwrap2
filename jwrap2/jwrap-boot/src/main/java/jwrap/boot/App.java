/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jwrap.boot;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Base64;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.xml.xpath.*;
import org.xml.sax.InputSource;
import org.w3c.dom.NodeList;
import java.io.StringReader;

import java.util.Properties;

public class App {

	public static String tryToRun(String xml) {
		try {
			run(xml);
			return "";
		} catch (Exception ex) {
			return stacktraceString(ex);
		}
	}

	private static NodeList xpathSearch(String xml, String spec) throws Exception {
		InputSource source = new InputSource(new StringReader(xml));
		XPathFactory xpathFactory = XPathFactory.newInstance();
		XPath xpath = xpathFactory.newXPath();
		XPathExpression expr = xpath.compile(spec);
		Object result = expr.evaluate(source, XPathConstants.NODESET);
		return (NodeList) result;
	}

	private static void run(String xml) throws Exception {
		// Properties props = System.getProperties();
		// props.list(System.out);
		// System.out.println(xml);
		NodeList argsList = xpathSearch(xml, "//args/arg/text()");
		String[] args = new String[argsList.getLength()];
		for (int i = 0; i < argsList.getLength(); i++) {
			// System.out.println(argsList.item(i).getNodeValue());
			args[i] = argsList.item(i).getNodeValue();
		}
		NodeList jarList = xpathSearch(xml, "//jar/text()");
		// System.out.println("jar=" + jarList.item(0).getNodeValue());
		String jar = jarList.item(0).getNodeValue();
		NodeList mainList = xpathSearch(xml, "//main/text()");
		// System.out.println("main=" + mainList.item(0).getNodeValue());
		String main = mainList.item(0).getNodeValue();
		NodeList propList = xpathSearch(xml, "//prop");
		for (int i = 0; i < propList.getLength(); i++) {
			// System.out.println(argsList.item(i).getNodeValue());
			// System.out.println(propList.item(i).getAttributes().getNamedItem("name").getTextContent());
			// System.out.println(propList.item(i).getTextContent());
			String attrName = propList.item(i).getAttributes().getNamedItem("name").getTextContent();
			String attrValue = propList.item(i).getTextContent();
			System.setProperty(attrName, attrValue);
		}
		URL url = (new File(jar)).toURI().toURL();
		URLClassLoader classLoader = URLClassLoader.newInstance(new URL[] { url });
		Class<?> globalMain = classLoader.loadClass(main);
		Method staticMethod = globalMain.getDeclaredMethod("main", String[].class);
		staticMethod.invoke(null, new Object[] { args });
	}

	private static String stacktraceString(Exception e) {
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw);
		e.printStackTrace(pw);
		String stackTrace = sw.toString();
		return stackTrace;
	}

}
