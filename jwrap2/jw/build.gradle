plugins {
    //id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.+'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

wrapper() {
    gradleVersion = '7.6.1'
}

def urlFile = { url ->
    def parts = url.split("/")
    def lastPart = parts[-1]
    //println lastPart
    def filePath = "$buildDir/download/${lastPart}"
    File file = new File(filePath)
    file.parentFile.mkdirs()
    if (!file.exists()) file.delete()
    println("Downloading from ${url}")
    println("  to ${filePath}")
    new URL(url).withInputStream { downloadStream ->
        file.withOutputStream { fileOut ->
            fileOut << downloadStream
        }
    }
    files(file.absolutePath)
}

dependencies {
    implementation urlFile('https://github.com/javacommons/java.library/releases/download/jar/my.library.jar')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    implementation 'com.google.guava:guava:31.1-jre'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-cbor
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.14.2'
	// https://mvnrepository.com/artifact/com.upokecenter/cbor
	implementation 'com.upokecenter:cbor:4.5.2'
	// https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation 'commons-cli:commons-cli:1.5.0'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-io
	implementation 'org.apache.commons:commons-io:1.3.2'
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-smile
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.14.2'
	// https://search.maven.org/artifact/com.amazon.ion/ion-java/1.9.5/jar?eh=
	implementation 'com.amazon.ion:ion-java:1.9.5'
	// https://mvnrepository.com/artifact/org.mongodb/bson
	implementation 'org.mongodb:bson:4.9.0'
	// https://mvnrepository.com/artifact/io.netty/netty-buffer
	implementation 'io.netty:netty-buffer:4.1.90.Final'
}

application {
    mainClass = 'global.Main'
}

tasks.named('test') {
    useJUnitPlatform()
}

task myRun(type: JavaExec) {
    group = 'application'
    //classpath = files('build/libs/jw-all.jar')
    classpath = files(shadowJar.archiveFile)
    main = 'global.Main'
    args = ['-i', 'input.txt', '-o', 'output.txt', 'other-1', 'other-2']
}
myRun.dependsOn shadowJar
